注意事项：
1.Java规定，Exception及其子类的异常必须捕获，但RuntimeException及其子类例外
2.尽管如此，编译器对RuntimeException及其子类不做强制捕获要求，不是指应用程序本身不应该捕获并处理RuntimeException，具体问题应当具体分析。 
3.多catch语句中只有一个能被执行，因此在catch时务必把子类写在前面
4.捕获到异常并再次抛出时，一定要留住原始异常
5.一段try-catch语句只能抛出一个异常
6.NullPointerException是一种代码逻辑错误，严禁使用catch来隐藏这种编码错误
7.用""空字符串比null安全
8.JVM默认关闭断言指令，，要执行assert语句必须给Java虚拟机传递-enableassertions(简写为-ea)参数启动断言
*常见异常：
Exception
│
├─ RuntimeException
│  │
│  ├─ NullPointerException
│  │
│  ├─ IndexOutOfBoundsException
│  │
│  ├─ SecurityException
│  │
│  └─ IllegalArgumentException
│     │
│     └─ NumberFormatException
│
├─ IOException
│  │
│  ├─ UnsupportedCharsetException
│  │
│  ├─ FileNotFoundException
│  │
│  └─ SocketException
│
├─ ParseException
│
├─ GeneralSecurityException
│
├─ SQLException
│
└─ TimeoutException
~异常处理~
java的异常
	异常是一种类，其继承关系如下：
		Object<-Throwable<-Error<-OutofMemoryError...
						 <-Exception<-RuntimeException...
									<-IOException...
	Throwable有两个体系：
		1.Error是严重错误，程序难以修复，如：
			OutOfMemoryError：内存耗尽
			NoClassDefFoundError：无法加载某个类
			StackOverflowError：栈溢出
		2.Exception是运行时产生的错误，可以被捕获并处理，如：
			NumberFormatException：数值类型格式错误
			FileNotFoundException：未找到文件
			SocketException：读取网络失败
		Exception又分为两大类：
			1.RuntimeException及其子类
			2.非RuntimeException(包括IOException、ReflectiveOperationException等)
	捕获异常：
		采用try...catch语句，把需要检查异常的代码放到try中，再用catch捕获
		捕获到异常后try语句块将直接终止，执行匹配的catch语句块
		在声明方法时可以使用throw xxx表示可能抛出的异常，如：
			public byte[] getBytes(String charsetName) throws UnsupportedEncodingException {
				...
			}
		如果这样声明，那么在调用方法时必须捕获这些异常，否则编译器就会报错
		当然调用方法时也可以声明这些异常，从而把异常处理放在调用新方法的方法上
		可以在catch模块用printStackTrace()输出异常(谨慎使用)
捕获异常
	多catch语句：
		可以使用多个catch语句捕获对应的Exception及其子类
		如同if语句一样，JVM在匹配时从上往下匹配，如果匹配到目标将停止继续匹配
	finally语句：
		finally语句在执行完try和catch后执行，即无论如何finally语句块必定执行
		如果方法已经声明了可能抛出的异常，可以没有catch，直接使用try...finally语句
	异常并行处理：
		如果处理两种异常的方法是相同的，可以使用|(或)并行处理，如：
			catch (IOException | NumberFormatException e) { // IOException或NumberFormatException
				System.out.println("Bad input");
			}
抛出异常
	传播异常：
		如果某个方法抛出了异常但是当前方法没有捕获异常，异常就会被抛到上层调用方法中，直到被捕获为止
	抛出异常：
		抛出异常分为两步：
			1.创建某个Exception的实例
			2.用throw语句抛出
		如：
			void process1(String s) {
				try {
					process2();
				} catch (NullPointerException e) {
					throw new IllegalArgumentException(e);//保留原始异常
				}
			}
			void process2(String s) {
				if (s==null) {
					throw new NullPointerException();
				}
			}
		以上代码process2抛出了一个异常，process1捕获后又抛出了另一个异常，相当于将异常转化为另一个异常
	异常屏蔽：
		一段try-catch语句只能抛出一个异常
		如果在finally中抛出了异常，catch中准备抛出的异常就会被屏蔽
		可以通过Throwable.addDuppressed添加异常，然后在用Throwable.getSuppressed获取所有异常
		如果不在finally中抛出异常就不会有异常屏蔽问题，所有不要在finally中抛出异常
	自定义异常：
		一般情况下尽量使用JDK已定义的异常类型
		自定义新的异常类型时应保证异常的继承体系，通常从RuntimeException派生
NullPointerException
	NullPointerException，空指针异常，即NPE，这个异常通常由JVM抛出
	处理NullPointerException：
		禁止捕获NullPointerException异常
		可以用Optional类处理NullPointerException异常
	定位NullPointerException：
		在Java14中可以通过给JVM添加一个-XX:+ShowCodeDetailsInExceptionMessages参数启用定位功能
		结果是可以在错误信息如：
			Exception in thread "main" java.lang.NullPointerException: Cannot invoke "String.toLowerCase()" because "<local1>.address.city" is null 
		中找到because，从而定位问题
断言(Assertion)
	断言是一种调试程序的方式，Java中的关键字是assert
	使用断言可以方便调试程序，如：
		public static void main(String[] args) {
			double x = Math.abs(-123.45);
			assert x >= 0;
			System.out.println(x);
		}
	如果断言语句assert x >= 0;为假则抛出一个AssertionError错误
	如果在断言语句后加上断言消息，在抛出错误的时候会输出消息，方便定位，如：
		assert x >= 0 : "x must >= 0";
	如果断言失败则程序直接退出
	对于可恢复的程序错误，不应该使用断言，而应该抛出异常并在上层捕获
	实际开发中很少使用断言，更好的方法是编写单元测试
标准日志(JDK Logging)
	在Debug阶段输出日志较多次使用System.out.println()方便许多
	Logging的好处如下：
		1.可以设置输出样式，避免自己每次都写"ERROR: " + var；
		2.可以设置输出级别，禁止某些级别输出。例如，只输出错误日志；
		3.可以被重定向到文件，这样可以在程序运行结束后查看日志；
		4.可以按包名控制日志级别，只输出某些包打的日志；
		...
	Java自带的日志包为java.util.logging
	使用日志举例如下：
		public class Hello {
			public static void main(String[] args) {
				Logger logger = Logger.getGlobal();
				logger.info("start process...");
				logger.warning("memory is running out...");
				logger.fine("ignored.");
				logger.severe("process will be terminated...");
			}
		}	
	其中info，warning，fine，severe都是输出日志，且logging会自动打印时间和调用的类
	日志有7个严重性级别：
		severe > warning > info > config > fine > finer > finest
	默认级别是info，因此info级别以下的日志不会被打印出来
	但是，Java内置的Logging系统在JVM启动时读取配置文件并完成初始化，一旦开始main()方法就无法修改
	且使用时必须在JVM启动时传递参数-Djava.util.logging.config.file=<config-file-name>
第三方日志(Commons Logging)
	Commons Logging时一个第三方日志库，它可以挂接不同的日志系统，并通过配置文件指定挂接的日志系统
	默认情况下，Commons Logging会自动搜索Log4j，如果没有找到Log4j再使用JDK Logging
	使用Commons Logging只有两步：
		1.通过LogFactory获取Log类的实例
		2.使用Log实例方法打印日志
	如：
		public class Main {
			public static void main(String[] args) {
				Log log = LogFactory.getLog(Main.class);
				log.info("start...");
				log.warn("end.");
			}
		}
	使用Commons Logging时必须将commons-logging-1.2.jar这个文件与Java源码Main.java放到一个目录下然后用javac编译Main.java，命令为：javac -cp commons-logging-1.2.jar Main.java
	用java命令执行编译后的Main.class即可，命令如下：java -cp .;commons-logging-1.2.jar Main
	Commons Logging有6个日志级别：
		fatal > error > warning > info > debug > trace
	默认级别是info
Log4j日志
	